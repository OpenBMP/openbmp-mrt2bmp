import sys
import struct
import socket
import gzip
import bz2
from struct import *
import collections

GZIP_HEADER = b'\x1f\x8b'
BZ2_HEADER = b'\x42\x5a\x68'

MRT_TYPES = {
    11:'OSPFv2',
    12:'TABLE_DUMP',
    13:'TABLE_DUMP_V2',
    16:'BGP4MP',
    17:'BGP4MP_ET',
    32:'ISIS',
    33:'ISIS_ET',
    48:'OSPFv3',
    49:'OSPFv3_ET'
}

TABLE_DUMP_V2_SUBTYPES = {
    1:'PEER_INDEX_TABLE',
    2:'RIB_IPV4_UNICAST',
    3:'RIB_IPV4_MULTICAST',
    4:'RIB_IPV6_UNICAST',
    5:'RIB_IPV6_MULTICAST',
    6:'RIB_GENERIC',
}

BGP4MP_SUBTYPES = {
    0:'BGP4MP_STATE_CHANGE',
    1:'BGP4MP_MESSAGE',
    2:'BGP4MP_ENTRY',             # Deprecated in RFC6396
    3:'BGP4MP_SNAPSHOT',          # Deprecated in RFC6396
    4:'BGP4MP_MESSAGE_AS4',
    5:'BGP4MP_STATE_CHANGE_AS4',
    6:'BGP4MP_MESSAGE_LOCAL',
    7:'BGP4MP_MESSAGE_AS4_LOCAL',
}

ADDRESS_FAMILY = {
    1:'IPv4',
    2:'IPv6'
}

class MrtFileException(Exception):

    def __init__(self, value):
        self.value = value

    def __str__(self):
        return repr(self.value)

class MrtParser():

    def __init__(self, file_path):

        f = open(file_path, 'rb')
        file_header = f.read(max(len(GZIP_HEADER), len(BZ2_HEADER)))

        if file_header.startswith(BZ2_HEADER):
            self.f = bz2.BZ2File(file_path, 'rb')

        elif file_header.startswith(GZIP_HEADER, 'rb'):
            self.f = gzip.GzipFile(file_path, 'rb')

        else:
            self.f = open(file_path, 'rb')

    def __iter__(self):
        return self

    def next(self):

        entry = dict()

        # Parse mrt header.
        entry['mrt_header'] = {}
        self.parseMrtHeader(entry['mrt_header'])

        # Parse mrt entry.
        entry['mrt_entry'] = {}
        msg_len = entry['mrt_header']['length']
        msg_type = entry['mrt_header']['type']
        msg_subtype = entry['mrt_header']['subtype']

        self.parseMrtEntry( entry['mrt_entry'], msg_len, msg_type, msg_subtype)

        return entry

    def parseMrtHeader(self, mrt_header):

        try:
            buf = self.f.read(12)

            if len(buf) == 0:
                self.close()

            elif len(buf) < 12:
                raise MrtFileException("Mrt Header length is %i < 12" % len(buf))

            """
            MRT HEADER:

            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                           Timestamp                           |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |             Type              |            Subtype            |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                             Length                            |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                      Message... (variable)
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

            """

            mrt_header['timestamp'], mrt_header['type'], mrt_header['subtype'], mrt_header['length'] = unpack('!I H H I', buf)
            #print entry

        except MrtFileException as e:
            print 'Mrt File exception occurred: ', e.value
            self.close()

    def parseMrtEntry(self, mrt_message, msg_len, msg_type, msg_subtype):

        try:
            buf = self.f.read(msg_len)

            if len(buf) < msg_len:
                raise MrtFileException("Mrt message (data) length is %i < %i (message length)", len(buf), msg_len)

            if MRT_TYPES[msg_type] == 'TABLE_DUMP_V2':
                pass

            elif MRT_TYPES[msg_type] == 'BGP4MP':
                self.parseBGP4MP(buf, mrt_message, msg_len, msg_type, msg_subtype)

        except MrtFileException as e:
            print 'Mrt File exception occurred: ', e.value
            self.close()

    def parseBGP4MP(self, buf, mrt_message, msg_len, msg_type, msg_subtype):

        if BGP4MP_SUBTYPES[msg_subtype] == "BGP4MP_MESSAGE_AS4":

            p = 0

            """
            BGP4MP_MESSAGE_AS4:

            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                         Peer AS Number                        |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                         Local AS Number                       |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |        Interface Index        |        Address Family         |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                      Peer IP Address (variable)               |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                      Local IP Address (variable)              |
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
           |                    BGP Message... (variable)
           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

            """

            mrt_message['peer_as'], mrt_message['local_as'], mrt_message['interface_index'], \
                mrt_message['address_family'] = unpack('!I I H H', buf[p:p+12])

            p += 12

            # IPv4
            if ADDRESS_FAMILY[mrt_message['address_family']] == "IPv4":
                mrt_message['peer_ip'] = socket.inet_ntop(socket.AF_INET, buf[p:p+4])
                p += 4

                mrt_message['local_ip'] = socket.inet_ntop(socket.AF_INET, buf[p:p+4])
                p += 4


            # IPv6
            elif ADDRESS_FAMILY[mrt_message['address_family']] == "IPv6":
                mrt_message['peer_ip'] = socket.inet_ntop(socket.AF_INET6, buf[p:p+16])
                p += 16

                mrt_message['local_ip'] = socket.inet_ntop(socket.AF_INET6, buf[p:p+16])
                p += 16

            mrt_message['raw_bgp_message'] = buf[p:]

    def close(self):
        self.f.close()
        raise StopIteration

if __name__ == "__main__":
    mp = MrtParser("updates.20160628.1235.bz2")

    i = 0

    for m in mp:
        #print m
        m
        i += 1

    print i

